import locale
import shutil
import pytz
import streamlit as st
from langchain_openai import ChatOpenAI
from datetime import datetime, timedelta
import streamlit as st
import os
import logging
from dotenv import load_dotenv
from langchain.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage, SystemMessage
from tools import fetch_and_concatenate_documents, load_and_save_to_faiss_json, remove_data


load_dotenv()


##################SETUP DES LOGS###################
# Ensure the logs directory exists
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)  # Create the directory if it doesn't exist


script_name = os.path.splitext(os.path.basename(__file__))[0]
log_file = os.path.join(log_dir, f"{script_name}.warn.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),  # Ã‰crire dans le fichier log
        logging.StreamHandler()  # Ã‰crire dans la console (terminal)
    ]
)
##############################################

# DÃ©finir la langue en franÃ§ais
locale.setlocale(locale.LC_TIME, "fr_FR")

# Fuseau horaire de la Nouvelle-CalÃ©donie
noumea_tz = pytz.timezone("Pacific/Noumea")
# Obtenir la date actuelle en Nouvelle-CalÃ©donie
current_date_noumea = datetime.now(noumea_tz).strftime("%A %d %B %Y")

# Obtenez la date actuelle
current_date = datetime.now().strftime("%Y-%m-%d")


SYSTEM_PROMPT = f"""
Aujourd'hui, nous sommes le {current_date}({current_date_noumea}).

Tu es un assistant intelligent conÃ§u pour aider un Etudiant Ã  organiser ses rÃ©visions et Ã  crÃ©er un emploi du temps adaptÃ©.
Ton rÃ´le est d'offrir des conseils prÃ©cis sur la gestion du temps. 
**PrÃ©sente le planning final sous forme de tableau pour faciliter la lecture.**
"""


PROMPT_TEMPLATE_REUNION="""
Vous avez les emplois du temps de deux Ã©tudiants dÃ©taillant leurs cours et leurs horaires. Ils souhaitent planifier des rÃ©unions communes entre le {start_date} et le {end_date}.

#### **DonnÃ©es des Ã©tudiants :**

- **Etudiant 1 :**  
{edt1}

- **Etudiant 2 :**  
{edt2}

#### **Objectif :**
Identifier des crÃ©neaux de rÃ©union oÃ¹ les deux Ã©tudiants sont disponibles en dehors de leurs cours, en respectant les contraintes suivantes :
1. **DurÃ©e des crÃ©neaux :** Chaque crÃ©neau doit **toujours** durer entre 1 heure et 2 heures .  
2. **Non-chevauchement :** Les crÃ©neaux proposÃ©s ne doivent pas empiÃ©ter sur les horaires des cours.  
3. **PÃ©riode de la journÃ©e :** Les crÃ©neaux doivent Ãªtre situÃ©s entre 07:00 et 18:00. Aucun crÃ©neau ne doit Ãªtre proposÃ© en dehors de cette plage horaire.  
4. **Optimisation :** Maximiser les pÃ©riodes communes disponibles pour faciliter la rÃ©union.

#### **MÃ©thodologie :**
1. **Assomption par dÃ©faut :** Si rien dans le contexte n'est prÃ©cisÃ© concernant une horraire, considÃ©rer que l'Etudiant est entiÃ¨rement disponible sur la plage horaire dÃ©finie (08:00 Ã  18:00).  
2. **Fusion des disponibilitÃ©s :** Identifier les pÃ©riodes communes en croisant les plages horaires libres des deux Ã©tudiants. Par exemple, si :
   - Etudiant 1 est libre de 10h00 Ã  14h00
   - Etudiant 2 est libre de 11h00 Ã  15h00  
   Le crÃ©neau commun serait de 11h00 Ã  14h00.  
3. **Organisation par jour :** Proposer les crÃ©neaux , en respectant la durÃ©e minimale et maximale des rÃ©unions.  
4. **Respect des horaires :** Limiter les suggestions aux heures comprises entre 08:00 et 18:00. Ignorer toute disponibilitÃ© en dehors de cette plage horaire.  
5. **Visualisation claire :** Fournir un tableau ou une liste structurÃ©e des disponibilitÃ©s communes, triÃ©es par jour.

#### **RÃ©sultat attendu :**
Un tableau clair et structurÃ© des crÃ©neaux disponibles, organisÃ© par jour de la semaine, qui facilite la sÃ©lection des meilleurs moments pour une rÃ©union.
"""



def generate_planning_for_2(querry_text,main_user,second_user,list_of_dates):
    try:
        # Utilisez model_name au lieu de model
        chat_model = ChatOpenAI(model_name="gpt-4o-mini")
        logging.info(f"ModÃ¨le initialisÃ©")
    except Exception as e:
        logging.error(f"Erreur lors de l'initialisation du modÃ¨le : {repr(e)}")
        return "Erreur lors de l'initialisation du modÃ¨le."

    #On supprime parce que j'arrive pas trop Ã  gÃ©rer les doublons for now
    st.write("GÃ©nÃ©ration des fichiers ...")

    remove_data("faiss_data")
    #CrÃ©ation donnÃ©es pour les deux Ã©tudiants avec l'embeding et tout le tralala
    st.write(f"GÃ©nÃ©ration pour {main_user}")
    load_and_save_to_faiss_json(main_user)
    st.write(f"GÃ©nÃ©ration pour {second_user}")
    load_and_save_to_faiss_json(second_user)

    st.write("CrÃ©ation du contexte ...")
    #On rÃ©cupÃ¨re les donnÃ©es et on les manipules pour rÃ©cupÃ©rer tout en une chaine de caractere 
    context_main_user=fetch_and_concatenate_documents(querry_text,list_of_dates,main_user)
    context_second_user=fetch_and_concatenate_documents(querry_text,list_of_dates,second_user)
    
    # CrÃ©e le prompt Ã  partir du template
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE_REUNION)
    prompt = prompt_template.format(edt1=context_main_user,edt2=context_second_user,start_date=list_of_dates[0],end_date=list_of_dates[len(list_of_dates)-1])
    
    # Ajoute le message systÃ¨me pour guider le comportement de l'IA
    messages = [
        SystemMessage(content=SYSTEM_PROMPT),
        HumanMessage(content=prompt)
    ]
    logging.info(f"Message envoyÃ© Ã  l'IA:\n {messages}")
    # Utilise le modÃ¨le de chat pour gÃ©nÃ©rer la rÃ©ponse
    st.write("GÃ©nÃ©ration de la rÃ©ponse")
    try:
        st.write(messages[1])
        response = chat_model(messages=messages)
        status.update(label="Download complete!", state="complete", expanded=False )
        return response.content  # Renvoie le contenu de la rÃ©ponse gÃ©nÃ©rÃ©e
    except Exception as e:
        logging.error(f"Erreur lors de la gÃ©nÃ©ration de la rÃ©ponse: {repr(e)}")
        return "Erreur lors de la gÃ©nÃ©ration de la rÃ©ponse."

st.set_page_config(page_title="RÃ©union", page_icon="ğŸ“…")

st.markdown("# RÃ©union")
st.write(
    """CrÃ©ation de rÃ©union avec d'autres Ã©tudiants"""
)



user_id1 = st.text_input("Entrez votre identifiant: ", "rcastelain")
user_id2 = st.text_input("Entrez deuxiÃ¨me identifiant: ", "htiaiba")
# SÃ©lection des dates
date_debut = st.date_input("SÃ©lectionner la date de dÃ©but pour la rÃ©union :")
#Pour l'instant on met pas vu qu'on a plus de cours
#date_debut = st.date_input("SÃ©lectionner la date de dÃ©but pour la rÃ©union :", min_value=date.today())
# Calcul de la date de fin max (14 jours aprÃ¨s la date de dÃ©but)
date_fin_max = date_debut + timedelta(weeks=2)

date_fin = st.date_input("SÃ©lectionner la date de fin :", min_value=date_debut, max_value=date_fin_max)

# GÃ©nÃ©rer une liste de dates entre date_debut et date_fin pour les utiliser dans la recherche
if date_fin >= date_debut:
    liste_dates = [
        (date_debut + timedelta(days=i)).isoformat()
        for i in range((date_fin - date_debut).days + 1)
    ]
    
# Bouton pour valider les entrÃ©es
if st.button("CrÃ©ation du planning"):
    # Appel de la fonction avec les entrÃ©es
    with st.status("GÃ©nÃ©ration de la rÃ©ponse...", expanded=True) as status:
        resultat = generate_planning_for_2(f"Cours entre date_debut : {date_debut}  date_fin : {date_fin}",user_id1, user_id2, liste_dates)

    # Affichage du rÃ©sultat
    st.write(resultat)


