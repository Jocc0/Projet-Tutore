import locale
import pytz
import streamlit as st
from langchain_openai import ChatOpenAI
from datetime import date, datetime, timedelta
import streamlit as st
import os
import logging
from dotenv import load_dotenv
from streamlit_calendar import calendar
from scrap_edt import get_edt_semaine
from faiss_handler import transform_to_documents,save_to_faiss,retrieve_documents,retrive_documents_score,transform_weeks_to_documents
from langchain.chains.conversation.memory import ConversationSummaryMemory
from langchain.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage, SystemMessage
load_dotenv()


##################SETUP DES LOGS###################
# Ensure the logs directory exists
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)  # Create the directory if it doesn't exist


script_name = os.path.splitext(os.path.basename(__file__))[0]
log_file = os.path.join(log_dir, f"{script_name}.warn.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),  # √âcrire dans le fichier log
        logging.StreamHandler()  # √âcrire dans la console (terminal)
    ]
)
##############################################
# D√©finir la langue en fran√ßais
locale.setlocale(locale.LC_TIME, "fr_FR")

# Fuseau horaire de la Nouvelle-Cal√©donie
noumea_tz = pytz.timezone("Pacific/Noumea")
# Obtenir la date actuelle en Nouvelle-Cal√©donie
current_date_noumea = datetime.now(noumea_tz).strftime("%A %d %B %Y")

# Obtenez la date actuelle
current_date = datetime.now().strftime("%Y-%m-%d")


SYSTEM_PROMPT = f"""
Aujourd'hui, nous sommes le {current_date}({current_date_noumea}).

Tu es un assistant intelligent con√ßu pour aider un √©tudiant √† organiser ses r√©visions et √† cr√©er un emploi du temps adapt√©.

Ton r√¥le est d'offrir des conseils pr√©cis sur la gestion du temps, la r√©partition des mati√®res, et les strat√©gies de r√©vision efficaces. 
Tu dois poser des questions pour bien comprendre les objectifs de l'√©tudiant, ses priorit√©s, et ses √©ch√©ances. 
Tu es l√† pour l'accompagner dans ses r√©visions en proposant des suggestions d'am√©lioration et en lui fournissant des explications claires et adapt√©es √† ses besoins.
**Pr√©sente le planning final sous forme de tableau pour faciliter la lecture.**
"""


PROMPT_TEMPLATE_REUNION="""
Voici les emplois du temps des deux utilisateurs avec leurs cours et leurs horaires.


Utilisateur 1 :
{edt1}

------

Utilisateur 2:
{edt2}

------

Cr√©e un planning de disponibilit√©s partag√©es pour permettre aux deux utilisateurs de trouver des cr√©neaux libres pour se rencontrer en dehors de leurs heures de cours. 
Identifie les cr√©neaux de disponibilit√© simultan√©e en tenant compte des horaires de cours de chacun et propose des cr√©neaux adapt√©s pour des r√©unions de travail sur leur projet tutor√©.
Donne aussi un bref sommaire des cours des deux utilisateurs

Assure-toi de respecter ces consignes :

√âvite les chevauchements avec les heures de cours.
Propose des cr√©neaux raisonnables en termes de dur√©e, en priorisant des cr√©neaux d'une √† deux heures.
Le r√©sultat attendu est un planning visuel ou un tableau des disponibilit√©s communes entre les deux utilisateurs.
"""

def generate_planning_for_2(querry_text,main_user,second_user):
    try:
        # Utilisez model_name au lieu de model
        chat_model = ChatOpenAI(model_name="gpt-4o-mini")
        logging.info(f"Mod√®le initialis√©")
    except Exception as e:
        logging.error(f"Erreur lors de l'initialisation du mod√®le : {repr(e)}")
        return "Erreur lors de l'initialisation du mod√®le."


    #Cr√©ation donn√©es 2√®me utilisateur
    data_second_user=get_edt_semaine(second_user)
    docs=transform_weeks_to_documents(data_second_user,second_user)
    save_to_faiss(docs)
    

    # R√©cup√®re les documents pertinents √† partir de FAISS
    edt_main_user = retrieve_documents(querry_text, main_user, 2)
    # Concat√®ne tous les documents r√©cup√©r√©s pour former le contexte
    context_main_user= "\n\n---\n\n".join([doc.page_content for doc in edt_main_user])
    logging.info(f"Document r√©cup√©r√© pour {main_user}: \n {context_main_user}")
    
    edt_second_user = retrieve_documents(querry_text,second_user,2)
    # Concat√®ne tous les documents r√©cup√©r√©s pour former le contexte
    context_second_user= "\n\n---\n\n".join([doc.page_content for doc in edt_second_user])
    logging.info(f"Document r√©cup√©r√© pour {second_user}: \n {context_main_user}")
    
    # Cr√©e le prompt √† partir du template
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE_REUNION)
    prompt = prompt_template.format(edt1=context_main_user,edt2=context_second_user)
    
    # Ajoute le message syst√®me pour guider le comportement de l'IA
    messages = [
        SystemMessage(content=SYSTEM_PROMPT),
        HumanMessage(content=prompt)
    ]
    logging.info(f"Message envoy√© √† l'IA:\n {messages}")
    # Utilise le mod√®le de chat pour g√©n√©rer la r√©ponse
    try:
        response = chat_model(messages=messages)
        return response.content  # Renvoie le contenu de la r√©ponse g√©n√©r√©e
    except Exception as e:
        logging.error(f"Erreur lors de la g√©n√©ration de la r√©ponse: {repr(e)}")
        return "Erreur lors de la g√©n√©ration de la r√©ponse."




st.set_page_config(page_title="R√©union", page_icon="üìÖ")

st.markdown("# R√©union")
st.write(
    """Cr√©ation de r√©union avec d'autres utilisateurs"""
)



user_id1 = st.text_input("Entrez votre identifiant: ", "rcastelain")
user_id2 = st.text_input("Entrez deuxi√®me identifiant: ", "htiaiba")
# S√©lection des dates
date_debut = st.date_input("S√©lectionner la date de d√©but pour la r√©union :", min_value=date.today())
# Calcul de la date de fin max (14 jours apr√®s la date de d√©but)
date_fin_max = date_debut + timedelta(weeks=2)

date_fin = st.date_input("S√©lectionner la date de fin :", min_value=date_debut, max_value=date_fin_max)
# Bouton pour valider les entr√©es
if st.button("Cr√©ation du planning"):
    # Appel de la fonction avec les entr√©es
    resultat = generate_planning_for_2(querry_text,user_id1, user_id2)
    
    # Affichage du r√©sultat
    st.write(resultat)


