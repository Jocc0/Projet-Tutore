from langchain_openai import ChatOpenAI
from datetime import datetime, timedelta
import streamlit as st
import os
import logging
from dotenv import load_dotenv
from streamlit_calendar import calendar
from scrap_edt import get_edt
from langchain.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage, SystemMessage
from tools import load_and_save_to_faiss_json,fetch_and_concatenate_documents
load_dotenv()

##################SETUP DES LOGS###################
# Ensure the logs directory exists
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)  # Create the directory if it doesn't exist


script_name = os.path.splitext(os.path.basename(__file__))[0]
log_file = os.path.join(log_dir, f"{script_name}.warn.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),  # Ã‰crire dans le fichier log
        logging.StreamHandler()  # Ã‰crire dans la console (terminal)
    ]
)
##############################################

# Obtenez la date actuelle
current_date = datetime.now().strftime("%Y-%m-%d")


# System Prompt to define the assistant's role
SYSTEM_PROMPT = f"""
Aujourd'hui, nous sommes le {current_date}.

Tu es un assistant intelligent conÃ§u pour aider un Ã©tudiant Ã  organiser ses rÃ©visions et Ã  crÃ©er un emploi du temps adaptÃ©. 
Ton rÃ´le est d'offrir des conseils prÃ©cis sur la gestion du temps, la rÃ©partition des matiÃ¨res, et les stratÃ©gies de rÃ©vision efficaces. 
Tu dois poser des questions pour bien comprendre les objectifs de l'Ã©tudiant, ses prioritÃ©s, et ses Ã©chÃ©ances. 
Tu es lÃ  pour l'accompagner dans ses rÃ©visions en proposant des suggestions d'amÃ©lioration et en lui fournissant des explications claires et adaptÃ©es Ã  ses besoins.
"""

# Chat prompt template
PROMPT_TEMPLATE = """
RÃ©ponds Ã  la question suivante en utilisant le contexte ci-dessous. VÃ©rifie que les informations utilisÃ©es concordent avec les questions de l'humain. Si tu n'es pas sÃ»r de la rÃ©ponse, n'hÃ©site pas Ã  demander des prÃ©cisions.

{context}

---

RÃ©ponds Ã  la question en utilisant le contexte ci-dessus : {question}

Exemple :
Question : Quel est le dÃ©but de mon cours de MathÃ©matiques ?
RÃ©ponse : Le dÃ©but de votre cours de MathÃ©matiques est le 10 janvier.
"""
    

def generate_response(querry_text, user_id,list_of_dates):
    
    try:
        # Utilisez model_name au lieu de model
        chat_model = ChatOpenAI(model_name="gpt-4o-mini")
        logging.info(f"ModÃ¨le initialisÃ©")
    except Exception as e:
        logging.error(f"Erreur lors de l'initialisation du modÃ¨le : {repr(e)}")
        return "Erreur lors de l'initialisation du modÃ¨le."

    # RÃ©cupÃ¨re les documents pertinents Ã  partir de FAISS
    context=fetch_and_concatenate_documents(querry_text,user_id=user_id,list_of_dates=list_of_dates,top_k=25)
    st.write(context)
    # CrÃ©e le prompt Ã  partir du template
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    prompt = prompt_template.format(context=context, question=querry_text)
    
    # Ajoute le message systÃ¨me pour guider le comportement de l'IA
    messages = [
        SystemMessage(content=SYSTEM_PROMPT),
        HumanMessage(content=prompt)
    ]

    # Utilise le modÃ¨le de chat pour gÃ©nÃ©rer la rÃ©ponse
    try:
        response = chat_model(messages=messages)
        return response.content  # Renvoie le contenu de la rÃ©ponse gÃ©nÃ©rÃ©e
    except Exception as e:
        logging.error(f"Erreur lors de la gÃ©nÃ©ration de la rÃ©ponse: {repr(e)}")
        return "Erreur lors de la gÃ©nÃ©ration de la rÃ©ponse."
    
# Fonction principale pour la page web
def main():

    st.title("ChatbotğŸ¤–")

    user_id = st.text_input("Entrez votre identifiant: ", "")

    if 'edt' not in st.session_state:
        st.session_state.edt = None

    if st.button("Valider"):
        if user_id:
            try:
                cours = get_edt(user_id)
                st.session_state.edt = cours
                st.success("Identifiant validÃ© ! Voici votre emploi du temps :")
                load_and_save_to_faiss_json()
                
            except Exception as e:
                st.error(str(e))
        else:
            st.warning("Veuillez entrer un identifiant valide.")

    # DÃ©finition des Ã©vÃ©nements avec les couleurs pour TD, TP, CM
    if st.session_state.edt:
        events = []
        for cours in st.session_state.edt:
            
            color = ""
            if "TD" and "Td" in cours['nom_cours']:
                color = "#32a852"  # TD en vert clair
            elif "TP" and "Tp" in cours['nom_cours']:
                color = "#ffb22e"  # TP en orange clair
            elif "CM" and "Cm" in cours['nom_cours']:
                color = "#4287f5"  # CM en bleu clair
            else:
                color = "gray"  # Sinon par dÃ©faut en gris

            events.append({
                'start': cours['dÃ©but'],
                'end': cours['fin'],
                'title': cours['nom_cours'],
                'description': cours['description'],
                'color': color
            })
    else:
        events = []

    # Affichage du calendrier dans un conteneur
    calendar(
    events=events,
    options={
        "locale": "fr",  # Tout en franÃ§ais
        'initialView': 'dayGridMonth',  # Vue par dÃ©faut : mois
        'editable': True,
        'headerToolbar': {
            'left': 'prev,today,next',
            'center': 'title',
            'right': 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        "buttonText": {
            "today": "Aujourd'hui",  # Change le texte du bouton Today
            "month": "Mois",  # Change le texte du mode Mois
            "week": "Semaine",  # Change le texte du mode Semaine
            "day": "Jour"  # Change le texte du mode Jour
        },
        "slotMinTime": "07:00:00", #C'est l'heure minimale sur le calendrier
        "slotMaxTime": "19:00:00", #C'est l'heure maximale sur le calendrier
        "scrollTime": "07:00:00", # C'est l'heure Ã  laquelle le calendrier en mode jour ou semaine commence
        "allDaySlot": False,  # permet ici de dÃ©sactiver l'affichage des Ã©vÃ©nements "All Day" (prennait de la place)
        "height": 'auto',  # La hauteur s'ajustera automatiquement ici *-*
        "contentHeight": 'auto',  # Ã§a Ã©vite le dÃ©filement vertical dans le calendrier
        "expandRows": True,  # Prends/remplit l'espace disponible
        "eventMaxHeight": 20,  # Hauteur maximale des Ã©vÃ©nements
        "stickyHeaderDates": True, # Permet de garder l'en-tÃªte fixe, si l'utilisateur doit dÃ©filer son emploi du temps pendant le mode semaine/jour

    },
    custom_css="""
    .fc-event-past { opacity: 0.8; } #Change l'opacitÃ© des Ã©vÃ©nements dÃ©jÃ  passÃ©
    .fc-event-time { font-style: italic; }
    .fc-event-title { font-weight: 700; font-size: 0.85rem; }  # RÃ©duire la taille du texte des Ã©vÃ©nements
    .fc-daygrid-event { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }  # Limiter la largeur des Ã©vÃ©nements et ajouter des points de suspension
    .fc-daygrid-block-event { max-height: 20px; }  # Restreindre la hauteur des Ã©vÃ©nements dans la vue "Mois"
    .fc-toolbar-title { font-size: 2rem; }
    .fc-timegrid-slot { height: auto !important; }  # Ajuste la hauteur des lignes dans la vue "semaine" et "jour"
    .fc-day-today {background: #f5f5f5 !important;}
    """
    )

    st.title("Chat :")
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Display chat messages from history on app rerun
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    st.write("Planifiez vos rÃ©visions (maximum 1 semaine) :")

    # SÃ©lection de la date de dÃ©but
    date_debut = st.date_input("Choisissez une date de dÃ©but :")

    # Calcul de la date de fin maximale (7 jours aprÃ¨s la date de dÃ©but)
    date_fin_max = date_debut + timedelta(weeks=1)

    # SÃ©lection de la date de fin
    date_fin = st.date_input(
        "Choisissez une date de fin (dans la semaine suivant la date de dÃ©but) :",
        min_value=date_debut, 
        max_value=date_fin_max
    )
    # GÃ©nÃ©rer une liste de dates entre date_debut et date_fin pour les utiliser dans la recherche
    if date_fin >= date_debut:  
        liste_dates = [
            (date_debut + timedelta(days=i)).isoformat()
            for i in range((date_fin - date_debut).days + 1)
        ]
    
    # React to user input
    if prompt := st.chat_input("Quand devrais-je rÃ©viser?"):
        # Display user message in chat message container
        st.chat_message("user").markdown(prompt)
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": prompt})

        # Here you would typically generate a response from your AI model
        response = generate_response(prompt,list_of_dates=liste_dates,user_id=user_id)

        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            st.markdown(response)
        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": response})



if __name__ == "__main__":
    main()
