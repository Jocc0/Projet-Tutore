from langchain_openai import ChatOpenAI
from datetime import datetime
import streamlit as st
import os
import logging
from dotenv import load_dotenv
from streamlit_calendar import calendar
from scrap_edt import get_edt,get_edt_semaine
from faiss_handler import transform_to_documents,save_to_faiss,retrieve_documents,transform_weeks_to_documents
from langchain.chains.conversation.memory import ConversationSummaryMemory
from langchain.prompts import ChatPromptTemplate
from langchain_core.messages import HumanMessage, SystemMessage
load_dotenv()


##################SETUP DES LOGS###################
# Ensure the logs directory exists
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)  # Create the directory if it doesn't exist


script_name = os.path.splitext(os.path.basename(__file__))[0]
log_file = os.path.join(log_dir, f"{script_name}.warn.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),  # √âcrire dans le fichier log
        logging.StreamHandler()  # √âcrire dans la console (terminal)
    ]
)
##############################################

# Obtenez la date actuelle
current_date = datetime.now().strftime("%Y-%m-%d")


# System Prompt to define the assistant's role
SYSTEM_PROMPT = f"""
Aujourd'hui, nous sommes le {current_date}.

Tu es un assistant intelligent con√ßu pour aider un √©tudiant √† organiser ses r√©visions et √† cr√©er un emploi du temps adapt√©. 
Ton r√¥le est d'offrir des conseils pr√©cis sur la gestion du temps, la r√©partition des mati√®res, et les strat√©gies de r√©vision efficaces. 
Tu dois poser des questions pour bien comprendre les objectifs de l'√©tudiant, ses priorit√©s, et ses √©ch√©ances. 
Tu es l√† pour l'accompagner dans ses r√©visions en proposant des suggestions d'am√©lioration et en lui fournissant des explications claires et adapt√©es √† ses besoins.
"""

# Chat prompt template
PROMPT_TEMPLATE = """
R√©ponds √† la question suivante en utilisant le contexte ci-dessous. V√©rifie que les informations utilis√©es concordent avec les questions de l'humain. Si tu n'es pas s√ªr de la r√©ponse, n'h√©site pas √† demander des pr√©cisions.

{context}

---

R√©ponds √† la question en utilisant le contexte ci-dessus : {question}

Exemple :
Question : Quel est le d√©but de mon cours de Math√©matiques ?
R√©ponse : Le d√©but de votre cours de Math√©matiques est le 10 janvier.
"""
    
def save_user_edt_to_faiss(user_id):
    data=get_edt_semaine(user_id)
    docs=transform_weeks_to_documents(data,user_id)
    save_to_faiss(docs)

def generate_response(querry_text, user_id):
    
    try:
        # Utilisez model_name au lieu de model
        chat_model = ChatOpenAI(model_name="gpt-4")
        logging.info(f"Mod√®le initialis√©")
    except Exception as e:
        logging.error(f"Erreur lors de l'initialisation du mod√®le : {repr(e)}")
        return "Erreur lors de l'initialisation du mod√®le."

    # R√©cup√®re les documents pertinents √† partir de FAISS
    results = retrieve_documents(querry_text, user_id, 30)
    
    # Concat√®ne tous les documents r√©cup√©r√©s pour former le contexte
    context_text = "\n\n---\n\n".join([doc.page_content for doc in results])
    
    # Cr√©e le prompt √† partir du template
    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    prompt = prompt_template.format(context=context_text, question=querry_text)
    
    # Ajoute le message syst√®me pour guider le comportement de l'IA
    messages = [
        SystemMessage(content=SYSTEM_PROMPT),
        HumanMessage(content=prompt)
    ]
    
    # Utilise le mod√®le de chat pour g√©n√©rer la r√©ponse
    try:
        response = chat_model(messages=messages)
        return response.content  # Renvoie le contenu de la r√©ponse g√©n√©r√©e
    except Exception as e:
        logging.error(f"Erreur lors de la g√©n√©ration de la r√©ponse: {repr(e)}")
        return "Erreur lors de la g√©n√©ration de la r√©ponse."
    
# Fonction principale pour la page web
def main():
        
    st.title("Chatbotü§ñ")

    user_id = st.text_input("Entrez votre identifiant: ", "")

    if 'edt' not in st.session_state:
        st.session_state.edt = None

    if st.button("Valider"):
        if user_id:
            try:
                cours = get_edt(user_id)
                st.session_state.edt = cours
                st.success("Identifiant valid√© ! Voici votre emploi du temps :")
                
                #Envoie et embeding des informations de l'utilisateur
                data=get_edt(user_id)
                docs=transform_to_documents(data,user_id)
                save_to_faiss(docs)
                
            except Exception as e:
                st.error(str(e))
        else:
            st.warning("Veuillez entrer un identifiant valide.")

    # D√©finition des √©v√©nements avec les couleurs pour TD, TP, CM
    if st.session_state.edt:
        events = []
        for cours in st.session_state.edt:
            
            color = ""
            if "TD" and "Td" in cours['nom_cours']:
                color = "#32a852"  # TD en vert clair
            elif "TP" and "Tp" in cours['nom_cours']:
                color = "#ffb22e"  # TP en orange clair
            elif "CM" and "Cm" in cours['nom_cours']:
                color = "#4287f5"  # CM en bleu clair
            else:
                color = "gray"  # Sinon par d√©faut en gris

            events.append({
                'start': cours['d√©but'],
                'end': cours['fin'],
                'title': cours['nom_cours'],
                'description': cours['description'],
                'color': color
            })
    else:
        events = []

    # Affichage du calendrier dans un conteneur
    calendar(
    events=events,
    options={
        "locale": "fr",  # Tout en fran√ßais
        'initialView': 'dayGridMonth',  # Vue par d√©faut : mois
        'editable': True,
        'headerToolbar': {
            'left': 'prev,today,next',
            'center': 'title',
            'right': 'dayGridMonth,timeGridWeek,timeGridDay'
        },
        "buttonText": {
            "today": "Aujourd'hui",  # Change le texte du bouton Today
            "month": "Mois",  # Change le texte du mode Mois
            "week": "Semaine",  # Change le texte du mode Semaine
            "day": "Jour"  # Change le texte du mode Jour
        },
        "slotMinTime": "07:00:00", #C'est l'heure minimale sur le calendrier
        "slotMaxTime": "19:00:00", #C'est l'heure maximale sur le calendrier
        "scrollTime": "07:00:00", # C'est l'heure √† laquelle le calendrier en mode jour ou semaine commence
        "allDaySlot": False,  # permet ici de d√©sactiver l'affichage des √©v√©nements "All Day" (prennait de la place)
        "height": 'auto',  # La hauteur s'ajustera automatiquement ici *-*
        "contentHeight": 'auto',  # √ßa √©vite le d√©filement vertical dans le calendrier
        "expandRows": True,  # Prends/remplit l'espace disponible
        "eventMaxHeight": 20,  # Hauteur maximale des √©v√©nements
        "stickyHeaderDates": True, # Permet de garder l'en-t√™te fixe, si l'utilisateur doit d√©filer son emploi du temps pendant le mode semaine/jour

    },
    custom_css="""
    .fc-event-past { opacity: 0.8; } #Change l'opacit√© des √©v√©nements d√©j√† pass√©
    .fc-event-time { font-style: italic; }
    .fc-event-title { font-weight: 700; font-size: 0.85rem; }  # R√©duire la taille du texte des √©v√©nements
    .fc-daygrid-event { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }  # Limiter la largeur des √©v√©nements et ajouter des points de suspension
    .fc-daygrid-block-event { max-height: 20px; }  # Restreindre la hauteur des √©v√©nements dans la vue "Mois"
    .fc-toolbar-title { font-size: 2rem; }
    .fc-timegrid-slot { height: auto !important; }  # Ajuste la hauteur des lignes dans la vue "semaine" et "jour"
    .fc-day-today {background: #f5f5f5 !important;}
    """
    )

    # Interaction avec le chatbot
    user_input = st.text_input("Vous: ", "")
    if st.button("Envoyer"):
        if user_input:
            st.write(f"Vous: {user_input}")
            bot_response = generate_response(user_input,user_id)
            st.write(f"Chatbot: {bot_response}")
        else:
            st.write("Veuillez entrer un message.")

def test():
    user_id="rcastelain"
    data=get_edt(user_id)
    docs=transform_to_documents(data,user_id)
    save_to_faiss(docs)
    results=retrieve_documents("Quels sont les cours pour la semaine du 21 au 27 octobre",user_id)
    print(results)

if __name__ == "__main__":
    main()
